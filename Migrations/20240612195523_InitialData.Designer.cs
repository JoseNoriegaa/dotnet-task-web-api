// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ef_practie.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240612195523_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityFrameworkPracticeApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9d2de54-d048-42fd-8715-251875766097"),
                            CreatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc),
                            Description = "",
                            Name = "Actividades Pendientes",
                            UpdatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc),
                            Weight = 20
                        },
                        new
                        {
                            Id = new Guid("ea5fdb05-f70e-47e0-91ee-292f1baf5eae"),
                            CreatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(10),
                            Description = "",
                            Name = "Actividades Personales",
                            UpdatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(10),
                            Weight = 50
                        });
                });

            modelBuilder.Entity("EntityFrameworkPracticeApp.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("task", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c3fd5ab-2202-4dea-82ea-1ef1dc7c9b20"),
                            CategoryId = new Guid("e9d2de54-d048-42fd-8715-251875766097"),
                            CreatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(1990),
                            Description = "",
                            Name = "Pago de servicios públicos",
                            Priority = 1,
                            UpdatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(1990)
                        },
                        new
                        {
                            Id = new Guid("94cbd857-fd05-496a-b025-673815fdf7b8"),
                            CategoryId = new Guid("ea5fdb05-f70e-47e0-91ee-292f1baf5eae"),
                            CreatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(2000),
                            Description = "",
                            Name = "Terminar película en Netflix",
                            Priority = 0,
                            UpdatedAt = new DateTime(2024, 6, 12, 19, 55, 22, 958, DateTimeKind.Utc).AddTicks(2000)
                        });
                });

            modelBuilder.Entity("EntityFrameworkPracticeApp.Models.Task", b =>
                {
                    b.HasOne("EntityFrameworkPracticeApp.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityFrameworkPracticeApp.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
